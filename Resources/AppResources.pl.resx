<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutButton" xml:space="preserve">
    <value>O grze AudioMemo</value>
  </data>
  <data name="AboutTitle" xml:space="preserve">
    <value>O grze</value>
  </data>
  <data name="AveragePointsLabel" xml:space="preserve">
    <value>Średnia ilość punktów</value>
  </data>
  <data name="AverageRoundsLabel" xml:space="preserve">
    <value>Średnia ilość rund</value>
  </data>
  <data name="BirdsSoundScheme" xml:space="preserve">
    <value>Ptaki</value>
  </data>
  <data name="BonusTimeAlert" xml:space="preserve">
    <value>Dodatkowy czas!</value>
  </data>
  <data name="CardField" xml:space="preserve">
    <value>Karta</value>
  </data>
  <data name="CardPickedField" xml:space="preserve">
    <value>Podniesiona karta</value>
  </data>
  <data name="CountLabel" xml:space="preserve">
    <value>Ilość rozgrywek</value>
  </data>
  <data name="DoAbortGameTitle" xml:space="preserve">
    <value>Czy na pewno przerwać grę?</value>
  </data>
  <data name="EmptyField" xml:space="preserve">
    <value>Puste</value>
  </data>
  <data name="GameEndedLabel" xml:space="preserve">
    <value>Gra zakończona</value>
  </data>
  <data name="GameTitle" xml:space="preserve">
    <value>Gra</value>
  </data>
  <data name="GameWillBeLostLabel" xml:space="preserve">
    <value>Ta gra zostanie utracona.</value>
  </data>
  <data name="GithubButton" xml:space="preserve">
    <value>AudioMemo w serwisie GitHub</value>
  </data>
  <data name="HelpButton" xml:space="preserve">
    <value>Pomoc</value>
  </data>
  <data name="InstrumentsSoundScheme" xml:space="preserve">
    <value>Instrumenty</value>
  </data>
  <data name="LicenseButton" xml:space="preserve">
    <value>Pokaż pełną treść licencji</value>
  </data>
  <data name="MaxPointsLabel" xml:space="preserve">
    <value>Maksymalna ilość punktów</value>
  </data>
  <data name="MaxRoundsLabel" xml:space="preserve">
    <value>Maksymalna ilość rund</value>
  </data>
  <data name="NewGameButton" xml:space="preserve">
    <value>Nowa gra</value>
  </data>
  <data name="NewGameButton1" xml:space="preserve">
    <value>Nowa gra</value>
  </data>
  <data name="NoButton" xml:space="preserve">
    <value>Nie</value>
  </data>
  <data name="PianoSoundScheme" xml:space="preserve">
    <value>Fortepian</value>
  </data>
  <data name="PointsLabel" xml:space="preserve">
    <value>Punkty</value>
  </data>
  <data name="RemainingCardsLabel" xml:space="preserve">
    <value>Pozostałe karty</value>
  </data>
  <data name="RoundLabel" xml:space="preserve">
    <value>Runda</value>
  </data>
  <data name="SecondsAlert" xml:space="preserve">
    <value>sek.</value>
  </data>
  <data name="SelectSoundSchemeTitle" xml:space="preserve">
    <value>Wybierz schemat dźwiękowy</value>
  </data>
  <data name="TimeEndedAlert" xml:space="preserve">
    <value>Koniec czasu!</value>
  </data>
  <data name="TutorialEndHint" xml:space="preserve">
    <value>To już koniec, gratulacje!
Jesteś już gotowy do gry!</value>
  </data>
  <data name="TutorialFirstPairHint" xml:space="preserve">
    <value>Właśnie o to chodzi!
Oczywiście, tu były tylko dwie karty. Sprawa staje się nieco bardziej skomplikowana, gdy plansza jest większa, a i kart jakby przybywa.
Plansza ma teraz wymiar trzy na trzy pola i znajdują się na niej cztery karty. Spróbuj!</value>
  </data>
  <data name="TutorialFirstPickHint" xml:space="preserve">
    <value>Teraz karta została odsłonięta. Odsłonięcie każdej karty powoduje odtworzenie jakiegoś dźwięku. Celem rozgrywki jest odnalezienie drugiej karty, której odpowiada ten sam dźwięk.
Na planszy pozostaje tylko jedna karta, a więc to zadanie nie powinno stanowić szczególnego wyzwania.</value>
  </data>
  <data name="TutorialStartHint" xml:space="preserve">
    <value>Witaj w grze AudioMemo!
Gra ta jest wzorowana na popularnej grze Memory polegającej na parowaniu kart. W tym wypadku wzory zostały zastąpione dźwiękami.
Na ekranie wyświetlana jest teraz plansza o rozmiarze 2 na 2 pola. Dwa z tych pól są puste, oznaczone figurą koła. Pozostałe dwa, zawierające kwadraty, kryją karty.
Wskazówka dla użytkowników czytników ekranu: podczas gry zaleca się wodzenie palcem po ekranie zamiast używania nawigacji element po elemencie, pozwala to szybciej obejrzeć całą planszę i wyrobić sobie jej obraz.
Po tapnięciu na polu z kartą, zostaje ona odsłonięta. Spróbuj teraz to zrobić.</value>
  </data>
  <data name="TutorialThirdPairHint" xml:space="preserve">
    <value>Całe wyzwanie polega na tym, by zapamiętać pozycje jak największej ilości kart.
Opłaca się to nie tylko dlatego, że przyspiesza zbieranie par, a, cóż, czas jest ograniczony, ale także ze względu na to, że dwie pary zebrane pod rząd oznaczają czas bonusowy.
Podkręcimy nieco poziom trudności. Teraz plansza ma cztery na cztery pola, a na niej znajduje się 10 kart. Dasz radę?</value>
  </data>
  <data name="TutorialTitle" xml:space="preserve">
    <value>Samouczek</value>
  </data>
  <data name="WinsLabel" xml:space="preserve">
    <value>Ilość zwycięstw</value>
  </data>
  <data name="WinToUnlockLabel" xml:space="preserve">
    <value>Wygraj na poprzednim schemacie, aby ten został odblokowany.</value>
  </data>
  <data name="YesButton" xml:space="preserve">
    <value>Tak</value>
  </data>
</root>