//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Memo.Resources {
    using System;
    
    
    /// <summary>
    ///   Klasa zasobu wymagająca zdefiniowania typu do wyszukiwania zlokalizowanych ciągów itd.
    /// </summary>
    // Ta klasa została automatycznie wygenerowana za pomocą klasy StronglyTypedResourceBuilder
    // przez narzędzie, takie jak ResGen lub Visual Studio.
    // Aby dodać lub usunąć składową, edytuj plik ResX, a następnie ponownie uruchom narzędzie ResGen
    // z opcją /str lub ponownie utwórz projekt VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class AppResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AppResources() {
        }
        
        /// <summary>
        /// Zwraca buforowane wystąpienie ResourceManager używane przez tę klasę.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Memo.Resources.AppResources", typeof(AppResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Przesłania właściwość CurrentUICulture bieżącego wątku dla wszystkich
        ///   przypadków przeszukiwania zasobów za pomocą tej klasy zasobów wymagającej zdefiniowania typu.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu About AudioMemo.
        /// </summary>
        internal static string AboutButton {
            get {
                return ResourceManager.GetString("AboutButton", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu About.
        /// </summary>
        internal static string AboutTitle {
            get {
                return ResourceManager.GetString("AboutTitle", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Average points.
        /// </summary>
        internal static string AveragePointsLabel {
            get {
                return ResourceManager.GetString("AveragePointsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Average rounds.
        /// </summary>
        internal static string AverageRoundsLabel {
            get {
                return ResourceManager.GetString("AverageRoundsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Birds.
        /// </summary>
        internal static string BirdsSoundScheme {
            get {
                return ResourceManager.GetString("BirdsSoundScheme", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Bonus time!.
        /// </summary>
        internal static string BonusTimeAlert {
            get {
                return ResourceManager.GetString("BonusTimeAlert", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Card.
        /// </summary>
        internal static string CardField {
            get {
                return ResourceManager.GetString("CardField", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Picked card.
        /// </summary>
        internal static string CardPickedField {
            get {
                return ResourceManager.GetString("CardPickedField", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Clear game data.
        /// </summary>
        internal static string ClearDataButton {
            get {
                return ResourceManager.GetString("ClearDataButton", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu All achieved scores will be lost. Are you sure you want to continue?.
        /// </summary>
        internal static string ClearDataLabel {
            get {
                return ResourceManager.GetString("ClearDataLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Games count.
        /// </summary>
        internal static string CountLabel {
            get {
                return ResourceManager.GetString("CountLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Are you sure you want to abort this game?.
        /// </summary>
        internal static string DoAbortGameTitle {
            get {
                return ResourceManager.GetString("DoAbortGameTitle", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Empty.
        /// </summary>
        internal static string EmptyField {
            get {
                return ResourceManager.GetString("EmptyField", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Game ended.
        /// </summary>
        internal static string GameEndedLabel {
            get {
                return ResourceManager.GetString("GameEndedLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Game.
        /// </summary>
        internal static string GameTitle {
            get {
                return ResourceManager.GetString("GameTitle", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu This game will be lost..
        /// </summary>
        internal static string GameWillBeLostLabel {
            get {
                return ResourceManager.GetString("GameWillBeLostLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu AudioMemo on GitHub.
        /// </summary>
        internal static string GithubButton {
            get {
                return ResourceManager.GetString("GithubButton", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Help.
        /// </summary>
        internal static string HelpButton {
            get {
                return ResourceManager.GetString("HelpButton", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Instruments.
        /// </summary>
        internal static string InstrumentsSoundScheme {
            get {
                return ResourceManager.GetString("InstrumentsSoundScheme", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Show full license.
        /// </summary>
        internal static string LicenseButton {
            get {
                return ResourceManager.GetString("LicenseButton", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Maximum points.
        /// </summary>
        internal static string MaxPointsLabel {
            get {
                return ResourceManager.GetString("MaxPointsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Maximum rounds.
        /// </summary>
        internal static string MaxRoundsLabel {
            get {
                return ResourceManager.GetString("MaxRoundsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu New game.
        /// </summary>
        internal static string NewGameButton {
            get {
                return ResourceManager.GetString("NewGameButton", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu No.
        /// </summary>
        internal static string NoButton {
            get {
                return ResourceManager.GetString("NoButton", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Piano.
        /// </summary>
        internal static string PianoSoundScheme {
            get {
                return ResourceManager.GetString("PianoSoundScheme", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Points.
        /// </summary>
        internal static string PointsLabel {
            get {
                return ResourceManager.GetString("PointsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Remaining cards.
        /// </summary>
        internal static string RemainingCardsLabel {
            get {
                return ResourceManager.GetString("RemainingCardsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Round.
        /// </summary>
        internal static string RoundLabel {
            get {
                return ResourceManager.GetString("RoundLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu sec..
        /// </summary>
        internal static string SecondsAlert {
            get {
                return ResourceManager.GetString("SecondsAlert", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Select sound scheme.
        /// </summary>
        internal static string SelectSoundSchemeTitle {
            get {
                return ResourceManager.GetString("SelectSoundSchemeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Time ended!.
        /// </summary>
        internal static string TimeEndedAlert {
            get {
                return ResourceManager.GetString("TimeEndedAlert", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu It is over, congratulations!
        ///You are now ready to play!.
        /// </summary>
        internal static string TutorialEndHint {
            get {
                return ResourceManager.GetString("TutorialEndHint", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu That is what it is all about!
        ///Of course, there were only two cards here. It gets a bit more complicated when the board is bigger and there are more cards.
        ///The board is now three by three and there are four cards on it. Try it!.
        /// </summary>
        internal static string TutorialFirstPairHint {
            get {
                return ResourceManager.GetString("TutorialFirstPairHint", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Now the card has been unveiled. The unveiling of each card causes some sound to be played. The object of the game is to find the second card that corresponds to the same sound.
        ///Only one card remains on the board, so this task should not be particularly challenging..
        /// </summary>
        internal static string TutorialFirstPickHint {
            get {
                return ResourceManager.GetString("TutorialFirstPickHint", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Welcome to AudioMemo game!
        ///This game is based on the popular Memory game, which goal is pairing cards. In this case, the patterns have been replaced by sounds.
        ///The screen now displays a 2 by 2 board. Two of fields are empty, marked with a circle figure. The other two, containing squares, hide cards.
        ///Tip for screen reader users: When playing the game, it is advisable to move your finger around the screen instead of using the item by item navigation.
        ///When you tap on a card, the card is revealed. Try to do [obcięto pozostałą część ciągu]&quot;;.
        /// </summary>
        internal static string TutorialStartHint {
            get {
                return ResourceManager.GetString("TutorialStartHint", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu The whole challenge is to remember the positions of as many cards as possible.
        ///This pays off not only because it speeds up the collection of pairs and, well, time is limited, but also because two pairs collected in a row means bonus time.
        ///Let&apos;s turn up the difficulty level a little. Now the board is four by four, and there are 10 cards on it. Can you do it?.
        /// </summary>
        internal static string TutorialThirdPairHint {
            get {
                return ResourceManager.GetString("TutorialThirdPairHint", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Tutorial.
        /// </summary>
        internal static string TutorialTitle {
            get {
                return ResourceManager.GetString("TutorialTitle", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Warning.
        /// </summary>
        internal static string WarningTitle {
            get {
                return ResourceManager.GetString("WarningTitle", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Wins count.
        /// </summary>
        internal static string WinsLabel {
            get {
                return ResourceManager.GetString("WinsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Win on the previous scheme to unlock this one..
        /// </summary>
        internal static string WinToUnlockLabel {
            get {
                return ResourceManager.GetString("WinToUnlockLabel", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Yes.
        /// </summary>
        internal static string YesButton {
            get {
                return ResourceManager.GetString("YesButton", resourceCulture);
            }
        }
    }
}
